'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import Link from 'next/link'
import Image from 'next/image'
import { FaUser, FaShieldAlt, FaKey, FaArrowLeft, FaSave, FaCheck, FaTimes, FaQrcode } from 'react-icons/fa'

interface UserData {
  id: string
  name: string
  email: string
  phoneNumber?: string
  role?: string
  twoFactorEnabled?: boolean
  twoFactorMethod?: 'app' | 'sms' | 'email'
}

export default function SecuritySettingsPage() {
  const router = useRouter()
  const [userData, setUserData] = useState<UserData | null>(null)
  const [loading, setLoading] = useState(true)
  const [success, setSuccess] = useState<string | null>(null)
  const [error, setError] = useState<string | null>(null)
  
  // 2FA states
  const [twoFactorEnabled, setTwoFactorEnabled] = useState(false)
  const [twoFactorMethod, setTwoFactorMethod] = useState<'app' | 'sms' | 'email'>('app')
  const [showSetupStep, setShowSetupStep] = useState(false)
  const [verificationCode, setVerificationCode] = useState('')
  const [setupStep, setSetupStep] = useState<'select' | 'configure' | 'verify'>('select')
  
  // Mock QR code URL (in a real app, this would be generated by the server)
  const [qrCodeUrl, setQrCodeUrl] = useState('')
  const [secretKey, setSecretKey] = useState('')
  
  useEffect(() => {
    const checkAuth = () => {
      // Get token from localStorage
      const token = localStorage.getItem('authToken')
      
      if (!token) {
        // Redirect to login if no token found
        router.push('/auth/login')
        return
      }
      
      try {
        // Get user data from localStorage
        const userDataStr = localStorage.getItem('currentUser')
        if (!userDataStr) {
          // If no user data but token exists, clear token and redirect
          localStorage.removeItem('authToken')
          router.push('/auth/login')
          return
        }
        
        // Parse user data
        const userData = JSON.parse(userDataStr)
        setUserData(userData)
        
        // Set 2FA state from user data if available
        if (userData.twoFactorEnabled !== undefined) {
          setTwoFactorEnabled(userData.twoFactorEnabled)
        }
        if (userData.twoFactorMethod) {
          setTwoFactorMethod(userData.twoFactorMethod)
        }
      } catch (error) {
        console.error('Error parsing user data:', error)
        localStorage.removeItem('authToken')
        localStorage.removeItem('currentUser')
        router.push('/auth/login')
      } finally {
        setLoading(false)
      }
    }
    
    checkAuth()
  }, [router])
  
  // Function to generate QR code and secret key for setup
  const generateSetupCredentials = () => {
    // This is a mock implementation
    // In a real app, you would make an API call to generate a secret key and QR code
    const mockSecretKey = 'ABCDEF123456789'
    setSecretKey(mockSecretKey)
    
    // Mock QR code URL - in a real app this would be a data URI or URL to a QR code image
    setQrCodeUrl('/mock-qr-code.png')
    
    setSetupStep('configure')
  }
  
  // Start 2FA setup process
  const startTwoFactorSetup = (method: 'app' | 'sms' | 'email') => {
    setTwoFactorMethod(method)
    setShowSetupStep(true)
    
    if (method === 'app') {
      generateSetupCredentials()
    } else {
      // For SMS or email, we would typically send a code to the user
      // In this demo, we'll just move to verification step
      setSetupStep('verify')
    }
  }
  
  // Verify code and complete setup
  const verifyAndEnableTwoFactor = (e: React.FormEvent) => {
    e.preventDefault()
    
    if (verificationCode.length !== 6 || !/^\d+$/.test(verificationCode)) {
      setError('Please enter a valid 6-digit code')
      return
    }
    
    setLoading(true)
    
    // For demo, we accept any 6-digit code
    // Update user data
    if (userData) {
      const updatedUserData = {
        ...userData,
        twoFactorEnabled: true,
        twoFactorMethod: twoFactorMethod
      }
      
      // Save to localStorage
      localStorage.setItem('currentUser', JSON.stringify(updatedUserData))
      setUserData(updatedUserData)
    }
    
    // Update state
    setTwoFactorEnabled(true)
    setShowSetupStep(false)
    setSuccess('Two-factor authentication has been enabled')
    setLoading(false)
  }
  
  // Disable 2FA
  const disableTwoFactor = () => {
    setLoading(true)
    
    // Update user data
    if (userData) {
      const updatedUserData = {
        ...userData,
        twoFactorEnabled: false,
        twoFactorMethod: undefined
      }
      
      // Save to localStorage
      localStorage.setItem('currentUser', JSON.stringify(updatedUserData))
      setUserData(updatedUserData)
    }
    
    // Update state
    setTwoFactorEnabled(false)
    setSuccess('Two-factor authentication has been disabled')
    setLoading(false)
  }
  
  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-green-500 border-opacity-50 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading security settings...</p>
        </div>
      </div>
    )
  }
  
  if (!userData) {
    return null // This should not happen as we redirect in useEffect, but just in case
  }
  
  return (
    <div className="min-h-screen bg-gray-50">
      <header className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 flex justify-between items-center">
          <Link href="/" className="flex items-center">
            <Image src="/logo.svg" alt="Plant Identifier" width={40} height={40} />
            <span className="ml-2 text-xl font-bold text-green-600">Plant Identifier</span>
          </Link>
          <Link
            href="/profile"
            className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700"
          >
            <FaUser className="mr-2" />
            My Profile
          </Link>
        </div>
      </header>
      
      <main className="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="bg-white shadow sm:rounded-lg">
          <div className="px-4 py-5 sm:px-6 bg-blue-50">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-lg leading-6 font-medium text-gray-900">Security Settings</h2>
                <p className="mt-1 max-w-2xl text-sm text-gray-500">Manage your account security and two-factor authentication</p>
              </div>
              <Link
                href="/settings"
                className="inline-flex items-center text-sm text-gray-600 hover:text-gray-900"
              >
                <FaArrowLeft className="mr-2" />
                Back to Settings
              </Link>
            </div>
          </div>
          
          {error && (
            <div className="border-t border-red-200 px-4 py-3 bg-red-50 text-red-600">
              {error}
            </div>
          )}
          
          {success && (
            <div className="border-t border-green-200 px-4 py-3 bg-green-50 text-green-600">
              {success}
            </div>
          )}
          
          <div className="border-t border-gray-200 px-4 py-5 sm:p-6">
            <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">Password</h3>
            <div className="flex items-center justify-between py-4 border-b border-gray-200">
              <div>
                <p className="text-sm font-medium text-gray-900">Change Password</p>
                <p className="text-sm text-gray-500">Update your password regularly to keep your account secure</p>
              </div>
              <Link
                href="/settings/password"
                className="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-green-600 hover:bg-green-700"
              >
                <FaKey className="mr-2 -ml-1 h-4 w-4" />
                Change
              </Link>
            </div>
            
            <h3 className="text-lg leading-6 font-medium text-gray-900 mt-8 mb-4">
              Two-Factor Authentication (2FA)
            </h3>
            
            {/* 2FA Status */}
            <div className="flex items-center justify-between py-4 border-b border-gray-200">
              <div>
                <div className="flex items-center">
                  <p className="text-sm font-medium text-gray-900 mr-2">Two-Factor Authentication</p>
                  {twoFactorEnabled ? (
                    <span className="bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full flex items-center">
                      <FaCheck className="mr-1" /> Enabled
                    </span>
                  ) : (
                    <span className="bg-gray-100 text-gray-800 text-xs px-2 py-1 rounded-full flex items-center">
                      <FaTimes className="mr-1" /> Disabled
                    </span>
                  )}
                </div>
                <p className="text-sm text-gray-500">
                  {twoFactorEnabled 
                    ? `Currently using ${twoFactorMethod === 'app' ? 'an authenticator app' : twoFactorMethod === 'sms' ? 'SMS' : 'email'} for verification`
                    : 'Add an extra layer of security to your account by enabling two-factor authentication'}
                </p>
              </div>
              {twoFactorEnabled ? (
                <button
                  onClick={disableTwoFactor}
                  disabled={loading}
                  className="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
                >
                  Disable
                </button>
              ) : (
                <button
                  onClick={() => setShowSetupStep(true)}
                  disabled={loading}
                  className="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-green-600 hover:bg-green-700"
                >
                  <FaShieldAlt className="mr-2 -ml-1 h-4 w-4" />
                  Enable
                </button>
              )}
            </div>
            
            {/* 2FA Setup Process */}
            {showSetupStep && !twoFactorEnabled && (
              <div className="mt-6 bg-gray-50 p-4 rounded-lg">
                <h4 className="text-md font-medium text-gray-900 mb-4">
                  {setupStep === 'select' ? 'Select Verification Method' : 
                   setupStep === 'configure' ? 'Configure Authentication App' : 
                   'Verify Code'}
                </h4>
                
                {setupStep === 'select' && (
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <button
                      onClick={() => startTwoFactorSetup('app')}
                      className="flex flex-col items-center p-4 border border-gray-300 rounded-lg hover:bg-gray-50"
                    >
                      <FaShieldAlt className="text-2xl text-green-600 mb-2" />
                      <span className="font-medium">Authentication App</span>
                      <span className="text-xs text-gray-500 mt-1 text-center">
                        Use Google Authenticator, Authy, or similar app
                      </span>
                    </button>
                    
                    <button
                      onClick={() => startTwoFactorSetup('sms')}
                      className="flex flex-col items-center p-4 border border-gray-300 rounded-lg hover:bg-gray-50"
                    >
                      <svg className="h-6 w-6 text-green-600 mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
                      </svg>
                      <span className="font-medium">SMS</span>
                      <span className="text-xs text-gray-500 mt-1 text-center">
                        Receive verification codes via text message
                      </span>
                    </button>
                    
                    <button
                      onClick={() => startTwoFactorSetup('email')}
                      className="flex flex-col items-center p-4 border border-gray-300 rounded-lg hover:bg-gray-50"
                    >
                      <svg className="h-6 w-6 text-green-600 mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                      </svg>
                      <span className="font-medium">Email</span>
                      <span className="text-xs text-gray-500 mt-1 text-center">
                        Receive verification codes via email
                      </span>
                    </button>
                  </div>
                )}
                
                {setupStep === 'configure' && twoFactorMethod === 'app' && (
                  <div className="space-y-4">
                    <p className="text-sm text-gray-600 mb-4">
                      1. Install an authenticator app like Google Authenticator or Authy on your mobile device.
                    </p>
                    
                    <div className="flex flex-col items-center justify-center my-6">
                      <div className="border border-gray-300 p-2 rounded-lg bg-white mb-4">
                        <FaQrcode className="h-48 w-48 text-gray-800" />
                      </div>
                      
                      <p className="text-sm font-medium text-gray-900 mt-2">Secret Key</p>
                      <p className="text-sm font-mono bg-gray-100 px-3 py-1 rounded mt-1 mb-2">
                        {secretKey}
                      </p>
                      <p className="text-xs text-gray-500 max-w-md text-center">
                        If you can't scan the QR code, you can manually enter this secret key into your authenticator app
                      </p>
                    </div>
                    
                    <p className="text-sm text-gray-600">
                      2. Scan this QR code with your authenticator app or enter the secret key manually.
                    </p>
                    
                    <p className="text-sm text-gray-600">
                      3. Enter the 6-digit verification code provided by your authenticator app below.
                    </p>
                    
                    <button
                      type="button"
                      onClick={() => setSetupStep('verify')}
                      className="mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700"
                    >
                      Next
                    </button>
                  </div>
                )}
                
                {setupStep === 'verify' && (
                  <form onSubmit={verifyAndEnableTwoFactor} className="space-y-4">
                    <p className="text-sm text-gray-600 mb-4">
                      {twoFactorMethod === 'app' 
                        ? 'Enter the 6-digit code from your authenticator app' 
                        : twoFactorMethod === 'sms' 
                          ? 'Enter the 6-digit code sent to your phone' 
                          : 'Enter the 6-digit code sent to your email'}
                    </p>
                    
                    <div>
                      <label htmlFor="verificationCode" className="block text-sm font-medium text-gray-700 mb-1">
                        Verification Code
                      </label>
                      <input
                        type="text"
                        id="verificationCode"
                        value={verificationCode}
                        onChange={(e) => setVerificationCode(e.target.value.replace(/[^0-9]/g, '').substring(0, 6))}
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 text-center text-xl tracking-widest"
                        placeholder="●●●●●●"
                        maxLength={6}
                        inputMode="numeric"
                        autoComplete="one-time-code"
                        required
                        disabled={loading}
                        autoFocus
                      />
                    </div>
                    
                    <div className="flex items-center justify-between pt-4">
                      <button
                        type="button"
                        onClick={() => {
                          if (twoFactorMethod === 'app' && setupStep === 'verify') {
                            setSetupStep('configure')
                          } else {
                            setSetupStep('select')
                          }
                        }}
                        disabled={loading}
                        className="text-sm text-gray-600 hover:text-gray-800"
                      >
                        Back
                      </button>
                      
                      <button
                        type="submit"
                        disabled={loading || verificationCode.length !== 6}
                        className={`px-4 py-2 rounded-lg text-white font-medium ${
                          loading || verificationCode.length !== 6
                            ? 'bg-green-400 cursor-not-allowed' 
                            : 'bg-green-600 hover:bg-green-700'
                        }`}
                      >
                        {loading ? (
                          <span className="flex items-center">
                            <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            Verifying...
                          </span>
                        ) : 'Enable 2FA'}
                      </button>
                    </div>
                  </form>
                )}
                
                <div className="mt-4 text-xs text-gray-500 border-t border-gray-200 pt-4">
                  <p className="font-medium mb-1">Important:</p>
                  <ul className="list-disc pl-5 space-y-1">
                    <li>Store your backup codes in a safe place - you'll need them if you lose access to your device.</li>
                    <li>Without 2FA access or backup codes, account recovery will require identity verification.</li>
                  </ul>
                </div>
              </div>
            )}
            
            {/* Security Recommendations */}
            <div className="mt-8 p-4 bg-yellow-50 rounded-lg">
              <h4 className="text-md font-medium text-yellow-800 mb-2">Security Recommendations</h4>
              <ul className="space-y-2 text-sm text-yellow-700">
                <li className="flex items-start">
                  <svg className="h-5 w-5 text-yellow-600 mr-2 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                  </svg>
                  <span>Enable two-factor authentication for an additional layer of security</span>
                </li>
                <li className="flex items-start">
                  <svg className="h-5 w-5 text-yellow-600 mr-2 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                  </svg>
                  <span>Use a strong, unique password that you don't use elsewhere</span>
                </li>
                <li className="flex items-start">
                  <svg className="h-5 w-5 text-yellow-600 mr-2 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                  </svg>
                  <span>Always logout when using shared or public computers</span>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </main>
    </div>
  )
} 